on:
  push:
    paths-ignore:
      - "**/*.md"
  pull_request:
  workflow_dispatch:
env:
  NODE_VERSION: 20
  NPM_REGISTRY: https://registry.npmjs.org
jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        es-version: [6.8.20, 7.17.4]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Install yarn
        run: corepack enable && corepack prepare yarn@4.9.1 --activate
      - name: Install node dependencies
        run: corepack yarn --cwd cassandra-distributed-task-queue-ui --immutable
      - name: Restore dotnet tools
        run: dotnet tool restore
      - name: Build dotnet
        run: dotnet build --configuration Release --verbosity minimal
      - name: Build front
        run: yarn --cwd cassandra-distributed-task-queue-ui build
      - name: Check C# code style
        run: dotnet jb cleanupcode Cassandra.DistributedTaskQueue.sln --profile=CatalogueCleanup --verbosity=WARN && git diff --exit-code -- ':!./cassandra-distributed-task-queue-ui/.yarn'
      - name: Check front code
        run: yarn --cwd cassandra-distributed-task-queue-ui lint
      - name: Build docker compose environment
        run: docker compose -f docker-compose.yaml up -d --build
        env:
          ES_VERSION: ${{ matrix.es-version }}
      - name: Run front tests
        run: yarn --cwd cassandra-distributed-task-queue-ui test
      - name: Run tests
        run: dotnet test --no-build --configuration Release
        env:
          ES_VERSION: ${{ matrix.es-version }}
      - name: Stop docker compose
        if: always()
        run: docker compose -f docker-compose.yaml down
        env:
          ES_VERSION: ${{ matrix.es-version }}
  publish:
    runs-on: ubuntu-22.04
    needs: test
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: Setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Install yarn
        run: corepack enable && corepack prepare yarn@4.9.1 --activate
      - name: Install node dependencies
        run: corepack yarn --cwd cassandra-distributed-task-queue-ui --immutable
      - name: Restore dotnet tools
        run: dotnet tool restore
      - name: Build dotnet
        run: dotnet build --configuration Release --verbosity minimal
      - name: Check version
        run: |
          tagName="${{github.ref_name}}"
          echo "Will publish nuget package for $tagName tag"
          # tag name starts with 'vX.Y-release' (e.g. use 'v4.2-release.1' tag for the first patch for release v4.2)
          if [[ $tagName =~ v([0-9]+\.[0-9]+)-release ]] ; then
            releaseVersion=${BASH_REMATCH[1]}
            echo "SHOULD_CREATE_RELEASE=true" >> $GITHUB_ENV
          else
            releaseVersion="${tagName:1}"
          fi
          echo "Will create release $releaseVersion for $tagName tag"
          if ! grep -Fq "\"version\": \"$releaseVersion\"" ./version.json ; then
            echo "Version in tag ($releaseVersion) does not match version in version.json"
            exit 1
          fi
      - name: Pack dotnet
        run: dotnet pack --no-build --configuration Release --output out
      - name: Build front
        run: yarn --cwd cassandra-distributed-task-queue-ui build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            **/*.nupkg
            **/*.tgz
          if-no-files-found: error
      - name: Publish NuGet
        run: dotnet nuget push "**/*.nupkg" --source https://api.nuget.org/v3/index.json --no-symbols --api-key ${{ env.NUGET_API_KEY }}
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      - name: Publish NPM
        run: |
          for file in ./cassandra-distributed-task-queue-ui/dist/*.tgz; do
            echo "Will publish $file"
            npm publish $file --ignore-scripts
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create release
        uses: softprops/action-gh-release@v1
        if: ${{ env.SHOULD_CREATE_RELEASE == 'true' }}
        with:
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
          files: |
            **/*.nupkg
            **/*.tgz
